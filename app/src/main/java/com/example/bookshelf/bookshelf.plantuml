@startuml

title __BOOKSHELF's Class Diagram__\n


  namespace com.example.bookshelf {
    class com.example.bookshelf.Book {
        - BookID : String
        - author : String
        - description : String
        - isbn : Long
        - ownerUsername : String
        - photoURL : String
        - title : String
        + Book()
        + Book()
        + equals()
        + getAuthor()
        + getBookFirebaseMap()
        + getBookID()
        + getDescription()
        + getIsbn()
        + getOwnerUsername()
        + getPhotoURL()
        + getStatus()
        + getTitle()
        + hashCode()
        + setAuthor()
        + setBookID()
        + setCoverImage()
        + setDescription()
        + setIsbn()
        + setOwnerUsername()
        + setStatus()
        + setStatus()
        + setTitle()
    }
  }
  

  namespace com.example.bookshelf {
    enum BookStatus {
      Accepted
      Available
      Borrowed
      Loaned
      Requested
    }
  }

  

  namespace com.example.bookshelf {
    class com.example.bookshelf.BookArrayAdapter {
        - books : ArrayList<Book>
        - context : Context
        + BookArrayAdapter()
        + getView()
    }
  }
  

  namespace com.example.bookshelf {
    class com.example.bookshelf.BookFactory {
        ~ bookCollectionReference : CollectionReference
        ~ bookMap : Map<String, Object>
        ~ temp : ArrayList<Book>
        - db : FirebaseFirestore
        + Author()
        + CoverImage()
        + Description()
        + ISBN()
        + OwnerUsername()
        + Status()
        + Title()
        ~ BookFactory()
        ~ New()
        ~ build()
        ~ delete()
        ~ edit()
        ~ get()
    }
  }
  

  namespace com.example.bookshelf {
    interface com.example.bookshelf.BookFactory.bookListener {
        {abstract} + getBook()
    }
  }
  

  

  namespace com.example.bookshelf {
    class com.example.bookshelf.BorrowMyBook {
        ~ theirUsername : String
        ~ BorrowMyBook()
        ~ scanBookConfirmReturn()
        ~ scanBookToLoan()
    }
  }
  

  namespace com.example.bookshelf {
    class com.example.bookshelf.BorrowTheirBook {
        ~ theirLocation : String
        ~ scanToBorrow()
        ~ scanToReturn()
    }
  }

  

  

  

  

  namespace com.example.bookshelf {
    class com.example.bookshelf.FirebaseHelper {
        - db : FirebaseFirestore
        ~ FirebaseHelper()
        ~ add()
        ~ append()
        ~ deleteDocument()
        ~ edit()
        ~ get()
        ~ getAppUserID()
        ~ getUserID()
        ~ removeArrayItem()
    }
  }
  

  namespace com.example.bookshelf {
    interface com.example.bookshelf.FirebaseHelper.IHelper {
        {abstract} + onFailure()
        {abstract} + onSuccess()
    }
  }
  

  namespace com.example.bookshelf {
    class com.example.bookshelf.ListNotifications {
        - book : String
        - db : FirebaseFirestore
        - owner : String
        - requester : String
        + ListNotifications()
        + ListNotifications()
        + getBookID()
        + getBookName()
        + getDate()
        + getMeetUpLocation()
        + getNotificationID()
        + getOwnerID()
        + getOwnerName()
        + getRequesterID()
        + getRequesterName()
        + getStatus()
        + setBook()
        + setBookName()
        + setDate()
        + setMeetUpLocation()
        + setNotificationID()
        + setOwner()
        + setOwnerName()
        + setRequester()
        + setRequesterName()
        + setStatus()
        {static} ~ get()
    }
  }

  

  namespace com.example.bookshelf {
    class com.example.bookshelf.NotificationAdapter {
        - context : Context
        - notifications : ArrayList<ListNotifications>
        + NotificationAdapter()
        + getView()
    }
  }
  

  

  namespace com.example.bookshelf {
    class com.example.bookshelf.RequestMyBook {
        ~ theirUsername : String
        ~ accept()
        ~ decline()
    }
  }
  

  namespace com.example.bookshelf {
    enum RequestStatus {
      ACCEPTED
      PENDING
    }
  }
  

  namespace com.example.bookshelf {
    class com.example.bookshelf.RequestTheirBook {
        {static} ~ requestNew()
    }
  }
  

  namespace com.example.bookshelf {
    class com.example.bookshelf.RequestView {
        ~ accept : Button
        ~ author : TextView
        ~ decline : Button
        ~ imageView : ImageView
        ~ isbn : TextView
        ~ owner : TextView
        ~ requester : TextView
        ~ title : TextView
        # onCreate()
    }
  }
  


  namespace com.example.bookshelf {
    class com.example.bookshelf.UserInfo {
        - email : String
        - fullname : String
        - notifications : ArrayList<String>
        - ownedBooks : ArrayList<String>
        - phone : String
        - picture : String
        - username : String
        + UserInfo()
        + UserInfo()
        + UserInfo()
        + getEmail()
        + getFullname()
        + getNotifications()
        + getOwnedBooks()
        + getPhone()
        + getPicture()
        + getUserMap()
        + getUsername()
        + setEmail()
        + setFullname()
        + setNotifications()
        + setOwnedBooks()
        + setPhone()
        + setPicture()
        + setUsername()
    }
  }
  

  namespace com.example.bookshelf {
    abstract class com.example.bookshelf.UserNotification {
        ~ NotificationID : String
        ~ NotificationText : String
        ~ bookID : String
        ~ date : String
        ~ meetUpLocation : String
        ~ ownerID : String
        ~ requesterID : String
        ~ UserNotification()
        ~ asMap()
        ~ updateStatus()
    }
  }
  

  com.example.bookshelf.Book o-- com.example.bookshelf.Book.BookStatus : status
  com.example.bookshelf.Book +-down- com.example.bookshelf.Book.BookStatus
  com.example.bookshelf.BookArrayAdapter -up-|> android.widget.ArrayAdapter
  com.example.bookshelf.BookFactory o-- com.example.bookshelf.BookFactory.bookListener : listener
  com.example.bookshelf.BookFactory o-- com.example.bookshelf.Book : thisBook
  com.example.bookshelf.BookFactory +-down- com.example.bookshelf.BookFactory.bookListener
  com.example.bookshelf.BorrowMyBook -up-|> com.example.bookshelf.UserNotification
  com.example.bookshelf.BorrowMyBook o-- com.example.bookshelf.Book : myBook
  com.example.bookshelf.BorrowTheirBook -up-|> com.example.bookshelf.UserNotification
  com.example.bookshelf.BorrowTheirBook o-- com.example.bookshelf.Book : theirBook
  com.example.bookshelf.FirebaseHelper +-down- com.example.bookshelf.FirebaseHelper.IHelper
  com.example.bookshelf.ListNotifications -up-|> com.example.bookshelf.UserNotification
  com.example.bookshelf.NotificationAdapter -up-|> android.widget.ArrayAdapter
  com.example.bookshelf.RequestMyBook -up-|> com.example.bookshelf.UserNotification
  com.example.bookshelf.RequestMyBook o-- com.example.bookshelf.Book : myBook
  com.example.bookshelf.RequestTheirBook -up-|> com.example.bookshelf.UserNotification
  com.example.bookshelf.RequestTheirBook o-- com.example.bookshelf.Book : theirBook
  com.example.bookshelf.UserNotification o-- com.example.bookshelf.RequestStatus : status


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
